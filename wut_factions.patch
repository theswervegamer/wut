diff --git a/app.py b/app.py
index 0000000..1111111 100644
--- a/app.py
+++ b/app.py
@@ -1,0 +1,760 @@
+from __future__ import annotations
+
+from pathlib import Path
+import sqlite3
+from typing import List
+
+from fastapi import FastAPI, Request, Form, HTTPException
+from fastapi.responses import HTMLResponse, RedirectResponse
+from fastapi.staticfiles import StaticFiles
+from fastapi.templating import Jinja2Templates
+import uvicorn
+
+APP_DIR = Path(__file__).resolve().parent
+DATA_DIR = APP_DIR / "data"
+DATA_DIR.mkdir(exist_ok=True)
+DB_PATH = DATA_DIR / "wut.db"
+STATIC_DIR = APP_DIR / "static"
+TEMPLATES_DIR = APP_DIR / "templates"
+
+app = FastAPI(title="Wrestling Universe Tracker")
+app.mount("/static", StaticFiles(directory=str(STATIC_DIR)), name="static")
+templates = Jinja2Templates(directory=str(TEMPLATES_DIR))
+
+
+# ---------------- DB helpers ----------------
+
+def get_conn() -> sqlite3.Connection:
+    conn = sqlite3.connect(DB_PATH, check_same_thread=False)
+    conn.row_factory = sqlite3.Row
+    try:
+        conn.execute("PRAGMA foreign_keys = ON")
+    except Exception:
+        pass
+    return conn
+
+
+def _column_exists(c: sqlite3.Connection, table: str, col: str) -> bool:
+    return any(r[1] == col for r in c.execute(f"PRAGMA table_info({table})"))
+
+
+def init_db() -> None:
+    conn = get_conn()
+    try:
+        # Wrestlers (singles)
+        conn.execute(
+            """
+            CREATE TABLE IF NOT EXISTS wrestlers (
+              id      INTEGER PRIMARY KEY AUTOINCREMENT,
+              name    TEXT NOT NULL,
+              gender  TEXT CHECK(gender IN ('Male','Female')) NOT NULL,
+              active  INTEGER NOT NULL  -- 1=yes, 0=no
+            );
+            """
+        )
+
+        # Tag teams + membership
+        conn.execute(
+            """
+            CREATE TABLE IF NOT EXISTS tag_teams (
+              id      INTEGER PRIMARY KEY AUTOINCREMENT,
+              name    TEXT NOT NULL UNIQUE,
+              active  INTEGER NOT NULL,
+              status  TEXT DEFAULT 'Active'
+            );
+            """
+        )
+        if not _column_exists(conn, "tag_teams", "status"):
+            conn.execute("ALTER TABLE tag_teams ADD COLUMN status TEXT DEFAULT 'Active'")
+            conn.execute(
+                """
+                UPDATE tag_teams
+                SET status = CASE WHEN COALESCE(active,1)=1 THEN 'Active' ELSE 'Inactive' END
+                WHERE status IS NULL
+                """
+            )
+
+        conn.execute(
+            """
+            CREATE TABLE IF NOT EXISTS tag_team_members (
+              team_id     INTEGER NOT NULL,
+              wrestler_id INTEGER NOT NULL,
+              PRIMARY KEY(team_id, wrestler_id),
+              FOREIGN KEY(team_id) REFERENCES tag_teams(id) ON DELETE CASCADE,
+              FOREIGN KEY(wrestler_id) REFERENCES wrestlers(id) ON DELETE RESTRICT
+            );
+            """
+        )
+
+        # Factions + membership (mixed gender)
+        conn.execute(
+            """
+            CREATE TABLE IF NOT EXISTS factions (
+              id      INTEGER PRIMARY KEY AUTOINCREMENT,
+              name    TEXT NOT NULL UNIQUE,
+              active  INTEGER NOT NULL,
+              status  TEXT DEFAULT 'Active'
+            );
+            """
+        )
+        if not _column_exists(conn, "factions", "status"):
+            conn.execute("ALTER TABLE factions ADD COLUMN status TEXT DEFAULT 'Active'")
+            conn.execute(
+                """
+                UPDATE factions
+                SET status = CASE WHEN COALESCE(active,1)=1 THEN 'Active' ELSE 'Inactive' END
+                WHERE status IS NULL
+                """
+            )
+
+        conn.execute(
+            """
+            CREATE TABLE IF NOT EXISTS faction_members (
+              faction_id  INTEGER NOT NULL,
+              wrestler_id INTEGER NOT NULL,
+              PRIMARY KEY(faction_id, wrestler_id),
+              FOREIGN KEY(faction_id)  REFERENCES factions(id)   ON DELETE CASCADE,
+              FOREIGN KEY(wrestler_id) REFERENCES wrestlers(id) ON DELETE RESTRICT
+            );
+            """
+        )
+
+        # Indexes
+        conn.execute("CREATE INDEX IF NOT EXISTS idx_wrestlers_name          ON wrestlers(name)")
+        conn.execute("CREATE INDEX IF NOT EXISTS idx_wrestlers_active        ON wrestlers(active)")
+        conn.execute("CREATE INDEX IF NOT EXISTS idx_tag_teams_name          ON tag_teams(name)")
+        conn.execute("CREATE INDEX IF NOT EXISTS idx_tag_teams_active        ON tag_teams(active)")
+        conn.execute("CREATE INDEX IF NOT EXISTS idx_team_members_team       ON tag_team_members(team_id)")
+        conn.execute("CREATE INDEX IF NOT EXISTS idx_team_members_wrestler   ON tag_team_members(wrestler_id)")
+        conn.execute("CREATE INDEX IF NOT EXISTS idx_factions_name           ON factions(name)")
+        conn.execute("CREATE INDEX IF NOT EXISTS idx_factions_active         ON factions(active)")
+        conn.execute("CREATE INDEX IF NOT EXISTS idx_faction_members_faction ON faction_members(faction_id)")
+        conn.execute("CREATE INDEX IF NOT EXISTS idx_faction_members_wrestler ON faction_members(wrestler_id)")
+
+        conn.commit()
+    finally:
+        conn.close()
+
+
+@app.on_event("startup")
+def on_startup() -> None:
+    init_db()
+
+
+# ---------------- Utilities ----------------
+
+def norm_gender(val: str) -> str:
+    v = (val or "").strip().capitalize()
+    if v not in {"Male", "Female"}:
+        raise ValueError("Gender must be Male or Female.")
+    return v
+
+
+def norm_active(val: str) -> int:
+    v = (val or "").strip().lower()
+    return 1 if v in {"yes", "y", "1", "true", "on"} else 0
+
+
+# ---------------- Common Routes ----------------
+
+@app.get("/favicon.ico", include_in_schema=False)
+async def favicon_redirect():
+    return RedirectResponse(url="/static/favicon.svg", status_code=307)
+
+
+@app.get("/", response_class=HTMLResponse, include_in_schema=False)
+async def home(request: Request):
+    return templates.TemplateResponse(
+        "index.html",
+        {"request": request, "active": "home"},
+    )
+
+
+# ---------------- Singles Roster ----------------
+
+@app.get("/roster", response_class=HTMLResponse, include_in_schema=False)
+async def roster(request: Request):
+    q = (request.query_params.get("q") or "").strip()
+    gender = (request.query_params.get("gender") or "All")
+    active = (request.query_params.get("active") or "All")
+
+    conditions = []
+    params: List[object] = []
+
+    if q:
+        conditions.append("name LIKE ? COLLATE NOCASE")
+        params.append(f"%{q}%")
+    if gender in ("Male", "Female"):
+        conditions.append("gender = ?")
+        params.append(gender)
+    if active in ("Yes", "No"):
+        conditions.append("active = ?")
+        params.append(1 if active == "Yes" else 0)
+
+    sql = "SELECT id, name, gender, active FROM wrestlers"
+    if conditions:
+        sql += " WHERE " + " AND ".join(conditions)
+    sql += " ORDER BY name"
+
+    conn = get_conn()
+    try:
+        rows = conn.execute(sql, params).fetchall()
+    finally:
+        conn.close()
+
+    wrestlers = [
+        {"id": r["id"], "name": r["name"], "gender": r["gender"], "active": bool(r["active"]) }
+        for r in rows
+    ]
+
+    return templates.TemplateResponse(
+        "roster_list.html",
+        {
+            "request": request,
+            "active": "roster",
+            "wrestlers": wrestlers,
+            "filters": {"q": q, "gender": gender, "active": active},
+        },
+    )
+
+
+@app.get("/roster/add", response_class=HTMLResponse, include_in_schema=False)
+async def roster_add_form(request: Request):
+    return templates.TemplateResponse(
+        "roster_form.html",
+        {
+            "request": request,
+            "active": "roster",
+            "heading": "Add Wrestler",
+            "action_url": "/roster/add",
+            "form": {"name": "", "gender": "Male", "active": "Yes"},
+            "error": "",
+        },
+    )
+
+
+@app.post("/roster/add", response_class=HTMLResponse, include_in_schema=False)
+async def roster_add_submit(
+    request: Request,
+    name: str = Form(...),
+    gender: str = Form(...),
+    active: str = Form(...),
+):
+    name = name.strip()
+    try:
+        gender_n = norm_gender(gender)
+        active_n = norm_active(active)
+    except ValueError as e:
+        return templates.TemplateResponse(
+            "roster_form.html",
+            {
+                "request": request,
+                "active": "roster",
+                "heading": "Add Wrestler",
+                "action_url": "/roster/add",
+                "form": {"name": name, "gender": gender, "active": active},
+                "error": str(e),
+            },
+            status_code=400,
+        )
+    if not name:
+        return templates.TemplateResponse(
+            "roster_form.html",
+            {
+                "request": request,
+                "active": "roster",
+                "heading": "Add Wrestler",
+                "action_url": "/roster/add",
+                "form": {"name": name, "gender": gender, "active": active},
+                "error": "Name is required.",
+            },
+            status_code=400,
+        )
+
+    conn = get_conn()
+    try:
+        conn.execute(
+            "INSERT INTO wrestlers(name, gender, active) VALUES (?,?,?)",
+            (name, gender_n, active_n),
+        )
+        conn.commit()
+    finally:
+        conn.close()
+
+    return RedirectResponse(url="/roster", status_code=303)
+
+
+@app.get("/roster/edit/{wid}", response_class=HTMLResponse, include_in_schema=False)
+async def roster_edit_form(request: Request, wid: int):
+    conn = get_conn()
+    try:
+        row = conn.execute(
+            "SELECT id, name, gender, active FROM wrestlers WHERE id = ?",
+            (wid,),
+        ).fetchone()
+    finally:
+        conn.close()
+
+    if not row:
+        raise HTTPException(status_code=404, detail="Wrestler not found")
+
+    form = {
+        "name": row["name"],
+        "gender": row["gender"],
+        "active": "Yes" if row["active"] else "No",
+    }
+    return templates.TemplateResponse(
+        "roster_form.html",
+        {
+            "request": request,
+            "active": "roster",
+            "heading": "Edit Wrestler",
+            "action_url": f"/roster/edit/{wid}",
+            "form": form,
+            "error": "",
+        },
+    )
+
+
+@app.post("/roster/edit/{wid}", response_class=HTMLResponse, include_in_schema=False)
+async def roster_edit_submit(
+    request: Request,
+    wid: int,
+    name: str = Form(...),
+    gender: str = Form(...),
+    active: str = Form(...),
+):
+    name = name.strip()
+    try:
+        gender_n = norm_gender(gender)
+        active_n = norm_active(active)
+    except ValueError as e:
+        return templates.TemplateResponse(
+            "roster_form.html",
+            {
+                "request": request,
+                "active": "roster",
+                "heading": "Edit Wrestler",
+                "action_url": f"/roster/edit/{wid}",
+                "form": {"name": name, "gender": gender, "active": active},
+                "error": str(e),
+            },
+            status_code=400,
+        )
+    if not name:
+        return templates.TemplateResponse(
+            "roster_form.html",
+            {
+                "request": request,
+                "active": "roster",
+                "heading": "Edit Wrestler",
+                "action_url": f"/roster/edit/{wid}",
+                "form": {"name": name, "gender": gender, "active": active},
+                "error": "Name is required.",
+            },
+            status_code=400,
+        )
+
+    conn = get_conn()
+    try:
+        cur = conn.execute("SELECT 1 FROM wrestlers WHERE id = ?", (wid,))
+        if not cur.fetchone():
+            raise HTTPException(status_code=404, detail="Wrestler not found")
+        conn.execute(
+            "UPDATE wrestlers SET name = ?, gender = ?, active = ? WHERE id = ?",
+            (name, gender_n, active_n, wid),
+        )
+        conn.commit()
+    finally:
+        conn.close()
+
+    return RedirectResponse(url="/roster", status_code=303)
+
+
+@app.post("/roster/delete/{wid}", include_in_schema=False)
+async def roster_delete(wid: int):
+    conn = get_conn()
+    try:
+        conn.execute("DELETE FROM wrestlers WHERE id = ?", (wid,))
+        conn.commit()
+    finally:
+        conn.close()
+    return RedirectResponse(url="/roster", status_code=303)
+
+
+# ---------------- Wrestler Profile ----------------
+
+@app.get("/wrestler/{wid}", response_class=HTMLResponse, include_in_schema=False)
+async def wrestler_profile(request: Request, wid: int):
+    conn = get_conn()
+    try:
+        row = conn.execute(
+            "SELECT id, name, gender, active FROM wrestlers WHERE id = ?",
+            (wid,),
+        ).fetchone()
+        if not row:
+            raise HTTPException(status_code=404, detail="Wrestler not found")
+        team_rows = conn.execute(
+            """
+            SELECT t.id, t.name,
+                   COALESCE(t.status, CASE WHEN t.active=1 THEN 'Active' ELSE 'Inactive' END) AS status
+            FROM tag_teams t
+            JOIN tag_team_members m ON m.team_id = t.id
+            WHERE m.wrestler_id = ?
+            ORDER BY t.name
+            """,
+            (wid,),
+        ).fetchall()
+    finally:
+        conn.close()
+
+    wrestler = {
+        "id": row["id"],
+        "name": row["name"],
+        "gender": row["gender"],
+        "active": bool(row["active"]),
+    }
+    teams = [{"id": r[0], "name": r[1], "status": r[2]} for r in team_rows]
+
+    return templates.TemplateResponse(
+        "wrestler_profile.html",
+        {"request": request, "active": "roster", "wrestler": wrestler, "teams": teams},
+    )
+
+
+# ---------------- Tag Teams ----------------
+
+@app.get("/teams", response_class=HTMLResponse, include_in_schema=False)
+async def teams_list(request: Request):
+    q = (request.query_params.get("q") or "").strip()
+    status = (request.query_params.get("status") or "All")
+
+    conditions = []
+    params: List[object] = []
+
+    if q:
+        conditions.append("t.name LIKE ? COLLATE NOCASE")
+        params.append(f"%{q}%")
+    if status in ("Active", "Inactive", "Disbanded"):
+        conditions.append("t.status = ?")
+        params.append(status)
+
+    base_sql = (
+        "SELECT t.id, t.name, t.active, t.status, "
+        "GROUP_CONCAT(w.name, ', ') AS members "
+        "FROM tag_teams t "
+        "LEFT JOIN tag_team_members m ON m.team_id = t.id "
+        "LEFT JOIN wrestlers w ON w.id = m.wrestler_id "
+    )
+    if conditions:
+        base_sql += "WHERE " + " AND ".join(conditions) + " "
+    base_sql += "GROUP BY t.id ORDER BY t.name"
+
+    conn = get_conn()
+    try:
+        rows = conn.execute(base_sql, params).fetchall()
+    finally:
+        conn.close()
+
+    teams = [
+        {
+            "id": r["id"],
+            "name": r["name"],
+            "status": (r["status"] or ("Active" if r["active"] else "Inactive")),
+            "members": r["members"] or "",
+        }
+        for r in rows
+    ]
+
+    return templates.TemplateResponse(
+        "teams_list.html",
+        {
+            "request": request,
+            "active": "teams",
+            "teams": teams,
+            "filters": {"q": q, "status": status},
+        },
+    )
+
+
+@app.get("/teams/add", response_class=HTMLResponse, include_in_schema=False)
+async def teams_add_form(request: Request):
+    conn = get_conn()
+    try:
+        wrestlers = conn.execute("SELECT id, name FROM wrestlers WHERE gender = 'Male' ORDER BY name").fetchall()
+    finally:
+        conn.close()
+
+    return templates.TemplateResponse(
+        "team_form.html",
+        {
+            "request": request,
+            "active": "teams",
+            "heading": "Add Tag Team",
+            "action_url": "/teams/add",
+            "form": {"name": "", "status": "Active"},
+            "all_wrestlers": [{"id": w["id"], "name": w["name"]} for w in wrestlers],
+            "selected_ids": [],
+            "error": "",
+        },
+    )
+
+
+@app.post("/teams/add", response_class=HTMLResponse, include_in_schema=False)
+async def teams_add_submit(
+    request: Request,
+    name: str = Form(...),
+    status: str = Form(...),
+    members: List[int] = Form([]),
+):
+    name = name.strip()
+    status = (status or "").strip().title()
+    if status not in {"Active", "Inactive", "Disbanded"}:
+        err = "Status must be Active, Inactive or Disbanded."
+    else:
+        err = ""
+
+    member_ids = list(dict.fromkeys(members))
+    if not name:
+        err = "Team name is required."
+    elif len(member_ids) < 2:
+        err = "Select at least two members for a tag team."
+
+    conn = get_conn()
+    try:
+        # unique name (case-insensitive)
+        if not err:
+            cur = conn.execute("SELECT id FROM tag_teams WHERE name = ? COLLATE NOCASE", (name,))
+            if cur.fetchone():
+                err = "A tag team with that name already exists."
+
+        # male-only validation
+        if not err and member_ids:
+            placeholders = ",".join(["?"] * len(member_ids))
+            cur = conn.execute(
+                f"SELECT COUNT(*) FROM wrestlers WHERE id IN ({placeholders}) AND gender = 'Male'",
+                member_ids,
+            )
+            male_count = cur.fetchone()[0]
+            if male_count != len(member_ids):
+                err = "Only male wrestlers can be selected for tag teams."
+
+        if err:
+            wrestlers = conn.execute("SELECT id, name FROM wrestlers WHERE gender = 'Male' ORDER BY name").fetchall()
+            return templates.TemplateResponse(
+                "team_form.html",
+                {
+                    "request": request,
+                    "active": "teams",
+                    "heading": "Add Tag Team",
+                    "action_url": "/teams/add",
+                    "form": {"name": name, "status": status},
+                    "all_wrestlers": [{"id": w["id"], "name": w["name"]} for w in wrestlers],
+                    "selected_ids": member_ids,
+                    "error": err,
+                },
+                status_code=400,
+            )
+
+        active_int = 1 if status == "Active" else 0
+        cur = conn.execute(
+            "INSERT INTO tag_teams(name, active, status) VALUES (?,?,?)",
+            (name, active_int, status),
+        )
+        team_id = cur.lastrowid
+        if member_ids:
+            conn.executemany(
+                "INSERT INTO tag_team_members(team_id, wrestler_id) VALUES (?, ?)",
+                [(team_id, wid) for wid in member_ids],
+            )
+        conn.commit()
+    finally:
+        conn.close()
+
+    return RedirectResponse(url="/teams", status_code=303)
+
+
+@app.get("/teams/edit/{tid}", response_class=HTMLResponse, include_in_schema=False)
+async def teams_edit_form(request: Request, tid: int):
+    conn = get_conn()
+    try:
+        team = conn.execute(
+            "SELECT id, name, active, status FROM tag_teams WHERE id = ?",
+            (tid,),
+        ).fetchone()
+        if not team:
+            raise HTTPException(status_code=404, detail="Team not found")
+        wrestlers = conn.execute("SELECT id, name FROM wrestlers WHERE gender = 'Male' ORDER BY name").fetchall()
+        selected = conn.execute(
+            "SELECT wrestler_id FROM tag_team_members WHERE team_id = ? ORDER BY wrestler_id",
+            (tid,),
+        ).fetchall()
+    finally:
+        conn.close()
+
+    selected_ids = [row[0] for row in selected]
+    status_val = team["status"] or ("Active" if team["active"] else "Inactive")
+
+    return templates.TemplateResponse(
+        "team_form.html",
+        {
+            "request": request,
+            "active": "teams",
+            "heading": "Edit Tag Team",
+            "action_url": f"/teams/edit/{tid}",
+            "form": {"name": team["name"], "status": status_val},
+            "all_wrestlers": [{"id": w["id"], "name": w["name"]} for w in wrestlers],
+            "selected_ids": selected_ids,
+            "error": "",
+        },
+    )
+
+
+@app.post("/teams/edit/{tid}", response_class=HTMLResponse, include_in_schema=False)
+async def teams_edit_submit(
+    request: Request,
+    tid: int,
+    name: str = Form(...),
+    status: str = Form(...),
+    members: List[int] = Form([]),
+):
+    name = name.strip()
+    status = (status or "").strip().title()
+    member_ids = list(dict.fromkeys(members))
+
+    err = ""
+    if status not in {"Active", "Inactive", "Disbanded"}:
+        err = "Status must be Active, Inactive or Disbanded."
+    elif not name:
+        err = "Team name is required."
+    elif len(member_ids) < 2:
+        err = "Select at least two members for a tag team."
+
+    conn = get_conn()
+    try:
+        if not err:
+            cur = conn.execute(
+                "SELECT id FROM tag_teams WHERE name = ? COLLATE NOCASE AND id <> ?",
+                (name, tid),
+            )
+            if cur.fetchone():
+                err = "Another team with that name already exists."
+
+        if not err and member_ids:
+            placeholders = ",".join(["?"] * len(member_ids))
+            cur = conn.execute(
+                f"SELECT COUNT(*) FROM wrestlers WHERE id IN ({placeholders}) AND gender = 'Male'",
+                member_ids,
+            )
+            male_count = cur.fetchone()[0]
+            if male_count != len(member_ids):
+                err = "Only male wrestlers can be selected for tag teams."
+
+        if err:
+            wrestlers = conn.execute("SELECT id, name FROM wrestlers WHERE gender = 'Male' ORDER BY name").fetchall()
+            return templates.TemplateResponse(
+                "team_form.html",
+                {
+                    "request": request,
+                    "active": "teams",
+                    "heading": "Edit Tag Team",
+                    "action_url": f"/teams/edit/{tid}",
+                    "form": {"name": name, "status": status},
+                    "all_wrestlers": [{"id": w["id"], "name": w["name"]} for w in wrestlers],
+                    "selected_ids": member_ids,
+                    "error": err,
+                },
+                status_code=400,
+            )
+
+        cur = conn.execute("SELECT 1 FROM tag_teams WHERE id = ?", (tid,))
+        if not cur.fetchone():
+            raise HTTPException(status_code=404, detail="Team not found")
+
+        active_int = 1 if status == "Active" else 0
+        conn.execute(
+            "UPDATE tag_teams SET name = ?, active = ?, status = ? WHERE id = ?",
+            (name, active_int, status, tid),
+        )
+        conn.execute("DELETE FROM tag_team_members WHERE team_id = ?", (tid,))
+        if member_ids:
+            conn.executemany(
+                "INSERT INTO tag_team_members(team_id, wrestler_id) VALUES (?, ?)",
+                [(tid, wid) for wid in member_ids],
+            )
+        conn.commit()
+    finally:
+        conn.close()
+
+    return RedirectResponse(url="/teams", status_code=303)
+
+
+@app.post("/teams/delete/{tid}", include_in_schema=False)
+async def teams_delete(tid: int):
+    conn = get_conn()
+    try:
+        conn.execute("DELETE FROM tag_team_members WHERE team_id = ?", (tid,))
+        conn.execute("DELETE FROM tag_teams WHERE id = ?", (tid,))
+        conn.commit()
+    finally:
+        conn.close()
+    return RedirectResponse(url="/teams", status_code=303)
+
+
+# ---------------- Factions ----------------
+
+@app.get("/factions", response_class=HTMLResponse, include_in_schema=False)
+async def factions_list(request: Request):
+    q = (request.query_params.get("q") or "").strip()
+    status = (request.query_params.get("status") or "All")
+
+    conditions: List[str] = []
+    params: List[object] = []
+    if q:
+        conditions.append("f.name LIKE ? COLLATE NOCASE")
+        params.append(f"%{q}%")
+    if status in ("Active", "Inactive", "Disbanded"):
+        conditions.append("f.status = ?")
+        params.append(status)
+
+    sql = (
+        "SELECT f.id, f.name, f.status, "
+        "GROUP_CONCAT(w.name, ', ') AS members "
+        "FROM factions f "
+        "LEFT JOIN faction_members fm ON fm.faction_id = f.id "
+        "LEFT JOIN wrestlers w       ON w.id = fm.wrestler_id "
+    )
+    if conditions:
+        sql += "WHERE " + " AND ".join(conditions) + " "
+    sql += "GROUP BY f.id ORDER BY f.name"
+
+    conn = get_conn()
+    try:
+        rows = conn.execute(sql, params).fetchall()
+    finally:
+        conn.close()
+
+    factions = [{
+        "id": r["id"],
+        "name": r["name"],
+        "status": r["status"] or "Inactive",
+        "members": r["members"] or "",
+    } for r in rows]
+
+    return templates.TemplateResponse(
+        "factions_list.html",
+        {"request": request, "active": "factions", "factions": factions,
+         "filters": {"q": q, "status": status}},
+    )
+
+
+@app.get("/factions/add", response_class=HTMLResponse, include_in_schema=False)
+async def factions_add_form(request: Request):
+    conn = get_conn()
+    try:
+        wrestlers = conn.execute("SELECT id, name FROM wrestlers ORDER BY name").fetchall()
+    finally:
+        conn.close()
+
+    return templates.TemplateResponse(
+        "faction_form.html",
+        {"request": request, "active": "factions",
+         "heading": "Add Faction", "action_url": "/factions/add",
+         "form": {"name": "", "status": "Active"},
+         "all_wrestlers": [{"id": w["id"], "name": w["name"]} for w in wrestlers],
+         "selected_ids": [], "error": ""},
+    )
+
+
+@app.post("/factions/add", response_class=HTMLResponse, include_in_schema=False)
+async def factions_add_submit(
+    request: Request,
+    name: str = Form(...),
+    status: str = Form(...),
+    members: List[int] = Form([]),
+):
+    name = name.strip()
+    status = (status or "").strip().title()
+    member_ids = list(dict.fromkeys(members))
+
+    err = ""
+    if status not in {"Active", "Inactive", "Disbanded"}:
+        err = "Status must be Active, Inactive or Disbanded."
+    elif not name:
+        err = "Faction name is required."
+    elif len(member_ids) < 2 or len(member_ids) > 10:
+        err = "Select between 2 and 10 members."
+
+    conn = get_conn()
+    try:
+        if not err:
+            cur = conn.execute("SELECT id FROM factions WHERE name = ? COLLATE NOCASE", (name,))
+            if cur.fetchone():
+                err = "A faction with that name already exists."
+
+        if err:
+            wrestlers = conn.execute("SELECT id, name FROM wrestlers ORDER BY name").fetchall()
+            return templates.TemplateResponse(
+                "faction_form.html",
+                {"request": request, "active": "factions",
+                 "heading": "Add Faction", "action_url": "/factions/add",
+                 "form": {"name": name, "status": status},
+                 "all_wrestlers": [{"id": w["id"], "name": w["name"]} for w in wrestlers],
+                 "selected_ids": member_ids, "error": err},
+                status_code=400,
+            )
+
+        active_int = 1 if status == "Active" else 0
+        cur = conn.execute(
+            "INSERT INTO factions(name, active, status) VALUES (?,?,?)",
+            (name, active_int, status),
+        )
+        fid = cur.lastrowid
+        if member_ids:
+            conn.executemany(
+                "INSERT INTO faction_members(faction_id, wrestler_id) VALUES (?,?)",
+                [(fid, wid) for wid in member_ids],
+            )
+        conn.commit()
+    finally:
+        conn.close()
+
+    return RedirectResponse(url="/factions", status_code=303)
+
+
+@app.get("/factions/edit/{fid}", response_class=HTMLResponse, include_in_schema=False)
+async def factions_edit_form(request: Request, fid: int):
+    conn = get_conn()
+    try:
+        faction = conn.execute(
+            "SELECT id, name, active, status FROM factions WHERE id = ?",
+            (fid,),
+        ).fetchone()
+        if not faction:
+            raise HTTPException(status_code=404, detail="Faction not found")
+        wrestlers = conn.execute("SELECT id, name FROM wrestlers ORDER BY name").fetchall()
+        selected = conn.execute(
+            "SELECT wrestler_id FROM faction_members WHERE faction_id = ? ORDER BY wrestler_id",
+            (fid,),
+        ).fetchall()
+    finally:
+        conn.close()
+
+    selected_ids = [r[0] for r in selected]
+    status_val = faction["status"] or ("Active" if faction["active"] else "Inactive")
+
+    return templates.TemplateResponse(
+        "faction_form.html",
+        {"request": request, "active": "factions",
+         "heading": "Edit Faction", "action_url": f"/factions/edit/{fid}",
+         "form": {"name": faction["name"], "status": status_val},
+         "all_wrestlers": [{"id": w["id"], "name": w["name"]} for w in wrestlers],
+         "selected_ids": selected_ids, "error": ""},
+    )
+
+
+@app.post("/factions/edit/{fid}", response_class=HTMLResponse, include_in_schema=False)
+async def factions_edit_submit(
+    request: Request,
+    fid: int,
+    name: str = Form(...),
+    status: str = Form(...),
+    members: List[int] = Form([]),
+):
+    name = name.strip()
+    status = (status or "").strip().title()
+    member_ids = list(dict.fromkeys(members))
+
+    err = ""
+    if status not in {"Active", "Inactive", "Disbanded"}:
+        err = "Status must be Active, Inactive or Disbanded."
+    elif not name:
+        err = "Faction name is required."
+    elif len(member_ids) < 2 or len(member_ids) > 10:
+        err = "Select between 2 and 10 members."
+
+    conn = get_conn()
+    try:
+        if not err:
+            cur = conn.execute(
+                "SELECT id FROM factions WHERE name = ? COLLATE NOCASE AND id <> ?",
+                (name, fid),
+            )
+            if cur.fetchone():
+                err = "Another faction with that name already exists."
+
+        if err:
+            wrestlers = conn.execute("SELECT id, name FROM wrestlers ORDER BY name").fetchall()
+            return templates.TemplateResponse(
+                "faction_form.html",
+                {"request": request, "active": "factions",
+                 "heading": "Edit Faction", "action_url": f"/factions/edit/{fid}",
+                 "form": {"name": name, "status": status},
+                 "all_wrestlers": [{"id": w["id"], "name": w["name"]} for w in wrestlers],
+                 "selected_ids": member_ids, "error": err},
+                status_code=400,
+            )
+
+        cur = conn.execute("SELECT 1 FROM factions WHERE id = ?", (fid,))
+        if not cur.fetchone():
+            raise HTTPException(status_code=404, detail="Faction not found")
+
+        active_int = 1 if status == "Active" else 0
+        conn.execute(
+            "UPDATE factions SET name = ?, active = ?, status = ? WHERE id = ?",
+            (name, active_int, status, fid),
+        )
+        conn.execute("DELETE FROM faction_members WHERE faction_id = ?", (fid,))
+        if member_ids:
+            conn.executemany(
+                "INSERT INTO faction_members(faction_id, wrestler_id) VALUES (?,?)",
+                [(fid, wid) for wid in member_ids],
+            )
+        conn.commit()
+    finally:
+        conn.close()
+
+    return RedirectResponse(url="/factions", status_code=303)
+
+
+@app.post("/factions/delete/{fid}", include_in_schema=False)
+async def factions_delete(fid: int):
+    conn = get_conn()
+    try:
+        conn.execute("DELETE FROM faction_members WHERE faction_id = ?", (fid,))
+        conn.execute("DELETE FROM factions WHERE id = ?", (fid,))
+        conn.commit()
+    finally:
+        conn.close()
+    return RedirectResponse(url="/factions", status_code=303)
+
+
+if __name__ == "__main__":
+    uvicorn.run("app:app", host="127.0.0.1", port=8000, reload=True)
diff --git a/templates/base.html b/templates/base.html
index 2222222..3333333 100644
--- a/templates/base.html
+++ b/templates/base.html
@@ -1,0 +1,10 @@
+<!-- ADD this tab inside <nav class="tabs"> alongside Home/Roster/Tag Teams -->
+<a class="tab {% if active == 'factions' %}active{% endif %}" href="/factions">Factions</a>
+
+<!-- (Optional) Plain link style if you haven’t added it yet -->
+<style>
+.plain-link { color: inherit; text-decoration: none; cursor: default; }
+.plain-link:visited { color: inherit; }
+.plain-link:hover, .plain-link:focus { text-decoration: none; }
+</style>
+
diff --git a/templates/factions_list.html b/templates/factions_list.html
new file mode 100644
index 0000000..4444444
--- /dev/null
+++ b/templates/factions_list.html
@@ -0,0 +1,62 @@
+{% extends "base.html" %}
+{% block content %}
+  <h2>Factions</h2>
+
+  <form method="get" class="filters" id="filters" action="/factions">
+    <input type="text" name="q" placeholder="Search faction name" value="{{ filters.q }}">
+    <select name="status">
+      <option value="All" {% if filters.status == 'All' %}selected{% endif %}>All</option>
+      <option value="Active" {% if filters.status == 'Active' %}selected{% endif %}>Active</option>
+      <option value="Inactive" {% if filters.status == 'Inactive' %}selected{% endif %}>Inactive</option>
+      <option value="Disbanded" {% if filters.status == 'Disbanded' %}selected{% endif %}>Disbanded</option>
+    </select>
+    <a class="btn" href="/factions">Clear</a>
+    <a class="btn" href="/factions/add">Add Faction</a>
+  </form>
+
+  {% if not factions %}
+    <p class="empty">No factions match your filters.</p>
+  {% else %}
+    <table>
+      <thead>
+        <tr>
+          <th>Name</th>
+          <th>Members</th>
+          <th>Status</th>
+          <th style="width:220px">Actions</th>
+        </tr>
+      </thead>
+      <tbody>
+        {% for f in factions %}
+          <tr>
+            <td>{{ f.name }}</td>
+            <td>{{ f.members }}</td>
+            <td>{{ f.status }}</td>
+            <td>
+              <a class="btn btn-small" href="/factions/edit/{{ f.id }}">Edit</a>
+              <form class="inline-form" method="post" action="/factions/delete/{{ f.id }}">
+                <button class="btn btn-small btn-danger" type="submit" onclick="return confirm('Delete faction {{ f.name }}?')">Delete</button>
+              </form>
+            </td>
+          </tr>
+        {% endfor %}
+      </tbody>
+    </table>
+  {% endif %}
+{% endblock %}
diff --git a/templates/faction_form.html b/templates/faction_form.html
new file mode 100644
index 0000000..5555555
--- /dev/null
+++ b/templates/faction_form.html
@@ -0,0 +1,40 @@
+{% extends "base.html" %}
+{% block content %}
+  <h2>{{ heading or "Add Faction" }}</h2>
+  {% if error %}
+    <p class="error">{{ error }}</p>
+  {% endif %}
+  <form method="post" action="{{ action_url or '/factions/add' }}">
+    <div class="field">
+      <label for="name">Faction Name</label>
+      <input type="text" id="name" name="name" value="{{ form.name }}" required
+             autocomplete="off" autocapitalize="none" spellcheck="false"
+             readonly onfocus="this.removeAttribute('readonly');">
+    </div>
+
+    <div class="field">
+      <label for="status">Status</label>
+      <select id="status" name="status">
+        <option value="Active"     {% if form.status == 'Active' %}selected{% endif %}>Active</option>
+        <option value="Inactive"   {% if form.status == 'Inactive' %}selected{% endif %}>Inactive</option>
+        <option value="Disbanded"  {% if form.status == 'Disbanded' %}selected{% endif %}>Disbanded</option>
+      </select>
+    </div>
+
+    <div class="field">
+      <label for="members">Members (2–10) — hold Ctrl/Cmd to select multiple</label>
+      <select id="members" name="members" multiple size="12">
+        {% for w in all_wrestlers %}
+          <option value="{{ w.id }}" {% if w.id in selected_ids %}selected{% endif %}>{{ w.name }}</option>
+        {% endfor %}
+      </select>
+    </div>
+
+    <p>
+      <button class="btn" type="submit">Save</button>
+      <a class="btn" href="/factions">Cancel</a>
+    </p>
+  </form>
+{% endblock %}
